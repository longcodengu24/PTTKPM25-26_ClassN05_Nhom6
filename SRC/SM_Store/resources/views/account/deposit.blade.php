@extends('layouts.account')
@section('content')
<div class="max-w-lg mx-auto">
    <div class="flex flex-col items-center mb-8">
        <span class="text-5xl coin-spin mb-2">ü™ô</span>
        <h2 class="orbitron text-3xl font-bold text-white mb-1">N·∫°p Sky Coins</h2>
        <div class="text-yellow-200 text-lg mb-2">S·ªë d∆∞ hi·ªán t·∫°i: <span class="font-bold">{{ number_format($currentUser['coins'] ?? session('coins', 0)) }}</span> coins</div>
    </div>
    <div class="profile-card rounded-3xl p-8 shadow-2xl bg-white/30 border border-white/20 backdrop-blur-lg">
        <form id="depositForm" class="space-y-6">
            @csrf
            <input type="hidden" id="user_id" name="user_id" value="{{ session('firebase_uid') }}">
            <div>
                <label class="block text-white font-semibold mb-2">Ch·ªçn g√≥i n·∫°p nhanh</label>
                <div class="grid grid-cols-3 gap-3">
                    <button type="button" class="amount-btn bg-white/60 hover:bg-yellow-100 rounded-xl p-4 flex flex-col items-center border border-yellow-200 transition-all" data-amount="10000">
                        <span class="text-2xl">ü™ô</span>
                        <span class="font-bold text-yellow-600">10,000</span>
                        <span class="text-xs text-gray-700">10.000ƒë</span>
                    </button>
                    <button type="button" class="amount-btn bg-white/60 hover:bg-yellow-100 rounded-xl p-4 flex flex-col items-center border border-yellow-200 transition-all" data-amount="20000">
                        <span class="text-2xl">ü™ô</span>
                        <span class="font-bold text-yellow-600">20,000</span>
                        <span class="text-xs text-gray-700">20.000ƒë</span>
                    </button>
                    <button type="button" class="amount-btn bg-white/60 hover:bg-yellow-100 rounded-xl p-4 flex flex-col items-center border border-yellow-200 transition-all" data-amount="25000">
                        <span class="text-2xl">ü™ô</span>
                        <span class="font-bold text-yellow-600">25,000</span>
                        <span class="text-xs text-gray-700">25.000ƒë</span>
                    </button>
                    <button type="button" class="amount-btn bg-white/60 hover:bg-yellow-100 rounded-xl p-4 flex flex-col items-center border border-yellow-200 transition-all" data-amount="30000">
                        <span class="text-2xl">ü™ô</span>
                        <span class="font-bold text-yellow-600">30,000</span>
                        <span class="text-xs text-gray-700">30.000ƒë</span>
                    </button>
                    <button type="button" class="amount-btn bg-white/60 hover:bg-yellow-100 rounded-xl p-4 flex flex-col items-center border border-yellow-200 transition-all" data-amount="50000">
                        <span class="text-2xl">ü™ô</span>
                        <span class="font-bold text-yellow-600">50,000</span>
                        <span class="text-xs text-gray-700">50.000ƒë</span>
                    </button>
                    <button type="button" class="amount-btn bg-white/60 hover:bg-yellow-100 rounded-xl p-4 flex flex-col items-center border border-yellow-200 transition-all" data-amount="100000">
                        <span class="text-2xl">ü™ô</span>
                        <span class="font-bold text-yellow-600">100,000</span>
                        <span class="text-xs text-gray-700">100.000ƒë</span>
                    </button>
                </div>
            </div>
            <div>
                <label class="block text-white font-semibold mb-2">Ho·∫∑c nh·∫≠p s·ªë coin mu·ªën n·∫°p</label>
                <input type="text" id="customAmount" name="amount" class="w-full px-4 py-2 rounded-lg border border-gray-300 focus:ring-2 focus:ring-yellow-400 outline-none" placeholder="Nh·∫≠p s·ªë ti·ªÅn (t·ª´ 10.000ƒë - 50.000.000ƒë)" />
                <div id="amountError" class="text-red-300 text-xs mt-1 hidden"></div>
                <p class="text-xs text-yellow-100 mt-1">1 coin = 1 VND (T·ªëi thi·ªÉu 10,000ƒë - T·ªëi ƒëa 50,000,000ƒë)</p>
            </div>
            <div>
                <label class="block text-white font-semibold mb-2">Ph∆∞∆°ng th·ª©c thanh to√°n</label>
                <div class="flex gap-4 justify-center">
                    <label class="flex items-center gap-2 cursor-pointer bg-white/20 px-4 py-2 rounded-lg border border-white/30">
                        <input type="radio" name="payment" class="accent-blue-500" checked>
                        <span class="text-blue-400 font-semibold">SePay</span>
                        <span class="text-2xl">üè¶</span>
                    </label>
                </div>
                <p class="text-xs text-center text-yellow-100 mt-2">Thanh to√°n qua chuy·ªÉn kho·∫£n ng√¢n h√†ng v·ªõi SePay</p>
            </div>
            <button type="submit" id="submitBtn" class="w-full py-3 rounded-xl bg-gradient-to-r from-yellow-400 to-pink-400 text-white font-bold text-lg shadow-lg hover:from-yellow-500 hover:to-pink-500 transition disabled:opacity-50 disabled:cursor-not-allowed">
                <span id="submitText">N·∫°p Coins v·ªõi SePay</span>
                <div id="loadingSpinner" class="hidden inline-block ml-2">
                    <div class="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                </div>
            </button>
            <div class="text-xs text-gray-200 mt-2 text-center">* Thanh to√°n an to√†n v·ªõi SePay - N·∫°p ngay, nh·∫≠n coins li·ªÅn!</div>
        </form>
    </div>
</div>

<!-- Modal hi·ªÉn th·ªã th√¥ng tin thanh to√°n SePay -->
<div id="paymentModal" class="fixed inset-0 bg-black/80 backdrop-blur-sm hidden z-50">
    <div class="flex items-center justify-center min-h-screen p-4">
        <div class="bg-white rounded-2xl max-w-md w-full p-6 shadow-2xl">
            <div class="text-center">
                <div class="text-4xl mb-4">‚è≥</div>
                <h3 class="text-xl font-bold text-gray-800 mb-2">Ch·ªù thanh to√°n</h3>
                <p class="text-sm text-gray-600 mb-4">Vui l√≤ng chuy·ªÉn kho·∫£n ƒë·ªÉ ho√†n t·∫•t giao d·ªãch</p>
                <div id="paymentInfo" class="space-y-4">
                    <!-- Th√¥ng tin s·∫Ω ƒë∆∞·ª£c load b·∫±ng JavaScript -->
                </div>
                <div class="mt-6 space-y-2">
                    <button id="checkStatusBtn" 
                            class="w-full bg-green-600 hover:bg-green-700 text-white font-medium py-2 px-4 rounded-lg transition">
                        Ki·ªÉm tra tr·∫°ng th√°i thanh to√°n
                    </button>
                    <button id="closeModalBtn" 
                            class="w-full bg-gray-500 hover:bg-gray-600 text-white font-medium py-2 px-4 rounded-lg transition">
                        ƒê√≥ng
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('depositForm');
    const customAmountInput = document.getElementById('customAmount');
    const amountBtns = document.querySelectorAll('.amount-btn');
    const submitBtn = document.getElementById('submitBtn');
    const submitText = document.getElementById('submitText');
    const loadingSpinner = document.getElementById('loadingSpinner');
    const paymentModal = document.getElementById('paymentModal');
    const paymentInfo = document.getElementById('paymentInfo');
    const closeModalBtn = document.getElementById('closeModalBtn');
    const checkStatusBtn = document.getElementById('checkStatusBtn');
    const amountError = document.getElementById('amountError');
    
    let currentTransactionId = null;
    let selectedAmount = null;

    // Function to show error
    function showAmountError(message) {
        amountError.textContent = message;
        amountError.classList.remove('hidden');
        customAmountInput.classList.add('border-red-400');
    }

    // Function to hide error
    function hideAmountError() {
        amountError.classList.add('hidden');
        customAmountInput.classList.remove('border-red-400');
    }

    // X·ª≠ l√Ω click v√†o c√°c n√∫t s·ªë ti·ªÅn g·ª£i √Ω
    amountBtns.forEach(btn => {
        btn.addEventListener('click', function() {
            const amount = parseInt(this.getAttribute('data-amount'));
            selectedAmount = amount;
            customAmountInput.value = amount.toLocaleString('vi-VN');
            hideAmountError(); // Hide any existing errors
            
            // Reset active state
            amountBtns.forEach(b => {
                b.classList.remove('bg-yellow-200', 'border-yellow-400', 'shadow-lg');
                b.classList.add('bg-white/60', 'border-yellow-200');
            });
            
            // Set active state
            this.classList.remove('bg-white/60', 'border-yellow-200');
            this.classList.add('bg-yellow-200', 'border-yellow-400', 'shadow-lg');
        });
    });

    // Format s·ªë ti·ªÅn khi nh·∫≠p
    customAmountInput.addEventListener('input', function() {
        hideAmountError(); // Hide error when user types
        
        const value = this.value.replace(/,/g, '');
        if (value && !isNaN(value) && value > 0) {
            const amount = parseInt(value);
            selectedAmount = amount;
            
            // Validate amount
            if (amount < 10000) {
                showAmountError('S·ªë ti·ªÅn t·ªëi thi·ªÉu l√† 10,000ƒë');
            } else if (amount > 50000000) {
                showAmountError('S·ªë ti·ªÅn t·ªëi ƒëa l√† 50,000,000ƒë');
            }
            
            // Format display
            const formatted = amount.toLocaleString('vi-VN');
            if (this.value !== formatted) {
                this.value = formatted;
            }
        } else if (!value) {
            selectedAmount = null;
            this.value = '';
        } else {
            showAmountError('Vui l√≤ng nh·∫≠p s·ªë h·ª£p l·ªá');
        }
        
        // Reset active state c·ªßa buttons khi nh·∫≠p manual
        amountBtns.forEach(b => {
            b.classList.remove('bg-yellow-200', 'border-yellow-400', 'shadow-lg');
            b.classList.add('bg-white/60', 'border-yellow-200');
        });
        
        console.log('Selected amount updated:', selectedAmount); // Debug log
    });

    // X·ª≠ l√Ω submit form
    form.addEventListener('submit', async function(e) {
        e.preventDefault();
        
        const userId = document.getElementById('user_id').value;
        
        if (!userId) {
            alert('Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ th·ª±c hi·ªán giao d·ªãch');
            return;
        }
        
        // L·∫•y gi√° tr·ªã t·ª´ input n·∫øu selectedAmount kh√¥ng c√≥
        let amount = selectedAmount;
        if (!amount) {
            const inputValue = customAmountInput.value.replace(/,/g, '');
            amount = parseInt(inputValue) || 0;
        }
        
        console.log('Amount to send:', amount); // Debug log
        
        if (!amount || amount < 10000 || amount > 50000000) {
            if (!amount) {
                showAmountError('Vui l√≤ng nh·∫≠p s·ªë ti·ªÅn');
            } else if (amount < 10000) {
                showAmountError('S·ªë ti·ªÅn t·ªëi thi·ªÉu l√† 10,000ƒë');
            } else {
                showAmountError('S·ªë ti·ªÅn t·ªëi ƒëa l√† 50,000,000ƒë');
            }
            customAmountInput.focus();
            return;
        }
        
        hideAmountError(); // Hide any errors before submitting

        // Show loading
        submitBtn.disabled = true;
        submitText.textContent = 'ƒêang t·∫°o y√™u c·∫ßu thanh to√°n...';
        loadingSpinner.classList.remove('hidden');

        try {
            const response = await fetch('{{ route("payment.deposit.create") }}', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-TOKEN': document.querySelector('input[name="_token"]').value
                },
                body: JSON.stringify({
                    amount: amount,
                    user_id: userId
                })
            });

            const data = await response.json();

            if (data.success) {
                currentTransactionId = data.data.transaction_id;
                showPaymentModal(data.data);
                
                // Show clear status message that payment is NOT complete yet
                setTimeout(() => {
                    const statusDiv = document.createElement('div');
                    statusDiv.className = 'bg-orange-50 border border-orange-200 p-3 rounded-lg mt-4';
                    statusDiv.innerHTML = `
                        <div class="flex items-center gap-2">
                            <span class="text-orange-600 text-lg">‚è≥</span>
                            <div>
                                <p class="font-semibold text-orange-800">ƒêang ch·ªù thanh to√°n</p>
                                <p class="text-sm text-orange-700">Vui l√≤ng chuy·ªÉn kho·∫£n ƒë·ªÉ ho√†n t·∫•t giao d·ªãch</p>
                            </div>
                        </div>
                    `;
                    
                    const paymentInfo = document.getElementById('paymentInfo');
                    if (paymentInfo) {
                        paymentInfo.appendChild(statusDiv);
                    }
                }, 500);
                
            } else {
                // Handle validation errors
                if (data.errors && data.errors.amount) {
                    showAmountError(data.errors.amount[0]);
                } else {
                    alert('L·ªói: ' + (data.message || 'Kh√¥ng th·ªÉ t·∫°o y√™u c·∫ßu thanh to√°n'));
                }
            }
        } catch (error) {
            console.error('Error:', error);
            alert('C√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i');
        } finally {
            // Hide loading
            submitBtn.disabled = false;
            submitText.textContent = 'N·∫°p Coins v·ªõi SePay';
            loadingSpinner.classList.add('hidden');
        }
    });

    function showPaymentModal(data) {
        let html = `
            <div class="text-left">
                <div class="bg-blue-50 p-4 rounded-lg mb-4">
                    <p class="text-sm text-gray-600 mb-1">M√£ giao d·ªãch:</p>
                    <p class="font-bold text-blue-600">${data.transaction_id}</p>
                </div>
                <div class="bg-green-50 p-4 rounded-lg mb-4">
                    <p class="text-sm text-gray-600 mb-1">S·ªë ti·ªÅn n·∫°p:</p>
                    <p class="font-bold text-green-600 text-lg">${parseInt(data.amount).toLocaleString('vi-VN')}ƒë</p>
                    <p class="text-xs text-gray-500">= ${parseInt(data.amount).toLocaleString('vi-VN')} coins</p>
                </div>
        `;
        
        // QR Code section with fallback options
        if (data.qr_code || data.qr_options) {
            html += `<div class="text-center mb-4">`;
            
            // Primary QR code
            if (data.qr_code) {
                html += `
                    <div class="qr-container">
                        <img id="primaryQR" src="${data.qr_code}" alt="QR Code" 
                             class="mx-auto max-w-48 border rounded-lg shadow"
                             onerror="handleQRError(this, '${data.transaction_id}')">
                        <p class="text-xs text-gray-500 mt-2">üì± Qu√©t m√£ QR b·∫±ng app ng√¢n h√†ng</p>
                    </div>
                `;
            }
            
            // Alternative QR options
            if (data.qr_options) {
                html += `
                    <div class="mt-4">
                        <p class="text-xs text-gray-600 mb-2">üîÑ Ch·ªçn ƒë·ªãnh d·∫°ng QR code kh√°c:</p>
                        <div class="grid grid-cols-2 gap-2">
                `;
                
                if (data.qr_options.vietqr && data.qr_options.vietqr !== data.qr_code) {
                    html += `<button onclick="switchQR('${data.qr_options.vietqr}')" class="text-xs bg-blue-100 hover:bg-blue-200 px-2 py-1 rounded transition">üî≤ QR C∆° b·∫£n</button>`;
                }
                if (data.qr_options.vietqr_compact && data.qr_options.vietqr_compact !== data.qr_code) {
                    html += `<button onclick="switchQR('${data.qr_options.vietqr_compact}')" class="text-xs bg-purple-100 hover:bg-purple-200 px-2 py-1 rounded transition">üì± Compact</button>`;
                }
                if (data.qr_options.vietqr_full) {
                    html += `<button onclick="switchQR('${data.qr_options.vietqr_full}')" class="text-xs bg-green-100 hover:bg-green-200 px-2 py-1 rounded transition">üìÑ In ·∫•n</button>`;
                }
                if (data.qr_options.vietqr_mini) {
                    html += `<button onclick="switchQR('${data.qr_options.vietqr_mini}')" class="text-xs bg-orange-100 hover:bg-orange-200 px-2 py-1 rounded transition">üè∑Ô∏è Mini</button>`;
                }
                if (data.qr_options.manual) {
                    html += `<button onclick="switchQR('${data.qr_options.manual}')" class="text-xs bg-gray-100 hover:bg-gray-200 px-2 py-1 rounded transition col-span-2">‚ÑπÔ∏è Th√¥ng tin TK</button>`;
                }
                
                html += `
                        </div>
                        <div class="mt-2 text-center">
                            <a href="/debug/test-vietqr/${data.amount}" target="_blank" class="text-xs text-blue-600 underline">üîó Test VietQR tr·ª±c ti·∫øp</a>
                        </div>
                    </div>
                `;
            }
            
            html += `</div>`;
        }
        
        if (data.bank_info && (data.bank_info.bank_name || data.bank_info.account_number)) {
            html += `
                <div class="bg-yellow-50 p-4 rounded-lg text-sm border border-yellow-200">
                    <h4 class="font-semibold mb-2 text-yellow-800">üè¶ Th√¥ng tin chuy·ªÉn kho·∫£n:</h4>
                    ${data.bank_info.bank_name ? `<p>Ng√¢n h√†ng: <strong>${data.bank_info.bank_name}</strong></p>` : ''}
                    ${data.bank_info.account_number ? `<p>S·ªë t√†i kho·∫£n: <strong>${data.bank_info.account_number}</strong></p>` : ''}
                    ${data.bank_info.account_name ? `<p>T√™n t√†i kho·∫£n: <strong>${data.bank_info.account_name}</strong></p>` : ''}
                    <p>N·ªôi dung: <strong class="text-red-600">${data.bank_info.content}</strong></p>
                    <p class="text-xs text-yellow-700 mt-2">‚ö†Ô∏è Chuy·ªÉn kho·∫£n ƒê√öNG n·ªôi dung ƒë·ªÉ t·ª± ƒë·ªông c·ªông coins</p>
                </div>
            `;
        }
        
        html += `
                <div class="bg-red-50 border-2 border-red-300 p-4 rounded-lg mt-4">
                    <div class="flex items-center gap-2 mb-3">
                        <span class="text-red-600 text-2xl animate-pulse">üö´</span>
                        <p class="font-bold text-red-800 text-lg">CH∆ØA TH√ÄNH C√îNG</p>
                    </div>
                    <div class="bg-white p-3 rounded border border-red-200 mb-3">
                        <p class="text-sm text-red-800 font-semibold mb-2">
                            ‚ùå Giao d·ªãch ch∆∞a ho√†n th√†nh - Coins ch∆∞a ƒë∆∞·ª£c c·ªông
                        </p>
                        <p class="text-xs text-red-700">
                            Th√¥ng b√°o "Th√†nh c√¥ng" s·∫Ω ch·ªâ hi·ªÉn th·ªã KHI ng√¢n h√†ng x√°c nh·∫≠n chuy·ªÉn kho·∫£n
                        </p>
                    </div>
                    <p class="text-sm text-red-700 mb-2 font-semibold">
                        ƒê·ªÉ ho√†n t·∫•t giao d·ªãch:
                    </p>
                    <ol class="text-sm text-red-600 ml-4 list-decimal space-y-2">
                        <li><strong>Chuy·ªÉn kho·∫£n ƒë√∫ng s·ªë ti·ªÅn</strong> (${parseInt(data.amount).toLocaleString('vi-VN')}ƒë)</li>
                        <li><strong>Ghi ƒê√öNG n·ªôi dung:</strong> <span class="bg-yellow-200 px-1 font-mono">${data.bank_info ? data.bank_info.content : ''}</span></li>
                        <li><strong>ƒê·ª£i x√°c nh·∫≠n t·ª´ ng√¢n h√†ng</strong> (2-10 ph√∫t)</li>
                        <li><strong>Coins s·∫Ω T·ª∞ ƒê·ªòNG c·ªông</strong> khi ng√¢n h√†ng x√°c nh·∫≠n</li>
                    </ol>
                    <div class="mt-3 p-2 bg-yellow-100 border border-yellow-300 rounded">
                        <p class="text-xs text-yellow-800 font-semibold">
                            ‚è∞ Ch·ªâ b·∫•m "Ki·ªÉm tra tr·∫°ng th√°i" SAU KHI ƒë√£ chuy·ªÉn kho·∫£n th√†nh c√¥ng!
                        </p>
                    </div>
                </div>
            </div>
        `;
        
        paymentInfo.innerHTML = html;
        paymentModal.classList.remove('hidden');
    }

    closeModalBtn.addEventListener('click', function() {
        paymentModal.classList.add('hidden');
    });

    checkStatusBtn.addEventListener('click', async function() {
        if (!currentTransactionId) return;

        const originalText = this.textContent;
        this.textContent = 'ƒêang ki·ªÉm tra...';
        this.disabled = true;

        try {
            const response = await fetch(`/payment/check-status/${currentTransactionId}`);
            const data = await response.json();

            if (data.success) {
                const status = data.data.status;
                let message = '';
                let shouldReload = false;
                
                switch (status) {
                    case 'completed':
                        message = '  
                                'üéâüéâüéâ COINS ƒê√É ƒê∆Ø·ª¢C N·∫†P V√ÄO T√ÄI KHO·∫¢N!\n\n' +
                                `üí∞ S·ªë ti·ªÅn: ${parseInt(data.data.amount).toLocaleString('vi-VN')} coins\n` +
                                `‚è∞ Th·ªùi gian: ${data.data.created_at}\n\n` +
                                'C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng d·ªãch v·ª•! üôè';
                        shouldReload = true;
                        break;
                    case 'processing':
                        message = '‚è≥ ƒêANG X·ª¨ L√ù\n\n' +
                                'Ng√¢n h√†ng ƒëang x√°c th·ª±c giao d·ªãch c·ªßa b·∫°n.\n' +
                                'Vui l√≤ng ƒë·ª£i th√™m 1-2 ph√∫t...';
                        break;
                    case 'pending':
                        message = '‚è∞ CH∆ØA HO√ÄN TH√ÄNH\n\n' +
                                '‚ùå H·ªá th·ªëng ch∆∞a nh·∫≠n ƒë∆∞·ª£c chuy·ªÉn kho·∫£n t·ª´ ng√¢n h√†ng.\n\n' +
                                'üìå Vui l√≤ng ki·ªÉm tra:\n' +
                                '‚Ä¢ ƒê√£ chuy·ªÉn kho·∫£n ƒë√∫ng s·ªë ti·ªÅn ch∆∞a?\n' +
                                '‚Ä¢ N·ªôi dung chuy·ªÉn kho·∫£n c√≥ ch√≠nh x√°c kh√¥ng?\n' +
                                '‚Ä¢ N·∫øu v·ª´a chuy·ªÉn, ƒë·ª£i th√™m 2-5 ph√∫t\n\n' +
                                'üí° Sau khi chuy·ªÉn kho·∫£n th√†nh c√¥ng, b·∫•m l·∫°i "Ki·ªÉm tra tr·∫°ng th√°i"';
                        break;
                    case 'failed':
                        message = '‚ùå TH·∫§T B·∫†I\n\n' +
                                'Thanh to√°n kh√¥ng th√†nh c√¥ng.\n' +
                                'Vui l√≤ng t·∫°o giao d·ªãch m·ªõi ho·∫∑c li√™n h·ªá h·ªó tr·ª£.';
                        break;
                    default:
                        message = `üìä Tr·∫°ng th√°i: ${status.toUpperCase()}\n\n` +
                                'N·∫øu b·∫°n ƒë√£ chuy·ªÉn kho·∫£n, vui l√≤ng ƒë·ª£i th√™m v√†i ph√∫t.';
                }
                
                alert(message);
                
                if (shouldReload) {
                    paymentModal.classList.add('hidden');
                    location.reload();
                }
            }
        } catch (error) {
            console.error('Error checking status:', error);
            alert('Kh√¥ng th·ªÉ ki·ªÉm tra tr·∫°ng th√°i giao d·ªãch');
        } finally {
            this.textContent = originalText;
            this.disabled = false;
        }
    });





    // Close modal when clicking outside
    paymentModal.addEventListener('click', function(e) {
        if (e.target === paymentModal) {
            paymentModal.classList.add('hidden');
        }
    });

    // Auto check status and process transactions
    let statusCheckInterval;
    let autoProcessInterval;
    
    const observer = new MutationObserver(function(mutations) {
        mutations.forEach(function(mutation) {
            if (mutation.attributeName === 'class') {
                if (paymentModal.classList.contains('hidden')) {
                    // Clear intervals when modal is closed
                    if (statusCheckInterval) {
                        clearInterval(statusCheckInterval);
                        statusCheckInterval = null;
                    }
                    if (autoProcessInterval) {
                        clearInterval(autoProcessInterval);
                        autoProcessInterval = null;
                    }
                } else if (currentTransactionId && !statusCheckInterval) {
                    console.log('üöÄ Starting auto-processing for transaction:', currentTransactionId);
                    
                    // Check status every 15 seconds (less frequent to avoid false positives)
                    statusCheckInterval = setInterval(async () => {
                        try {
                            const response = await fetch(`/debug/check-status/${currentTransactionId}`);
                            const data = await response.json();
                            
                            console.log('Status check result:', data);
                            
                            // Only update UI if response is successful
                            if (data.success) {
                                // Update status indicator in real-time
                                updatePaymentStatusUI(data.data.status);
                                
                                // Only show success if REALLY completed AND processed
                                if (data.data.status === 'completed' && data.data.processed === true) {
                                    clearInterval(statusCheckInterval);
                                    
                                    console.log('üéâ Transaction truly completed!');
                                    
                                    // Show success notification
                                    showSuccessNotification();
                                    
                                    setTimeout(() => {
                                        location.reload();
                                    }, 3000);
                                }
                            } else {
                                // If error, show pending status
                                updatePaymentStatusUI('pending');
                                console.log('Status check failed, showing pending');
                            }
                        } catch (error) {
                            console.error('Auto check error:', error);
                            updatePaymentStatusUI('pending'); // Default to pending on error
                        }
                    }, 15000); // Check every 15 seconds
                    
                    // DISABLED AUTO-PROCESS: Only manual status check to prevent false success
                    // User must actually complete bank transfer before success notification
                }
            }
        });
    });
    
    observer.observe(paymentModal, { attributes: true });
});

// Global functions for QR handling
function handleQRError(img, transactionId) {
    console.error('QR Code failed to load:', img.src);
    
    // Generate fallback QR using different service
    const fallbackUrl = 'https://api.qrserver.com/v1/create-qr-code/?size=300x300&data=' + 
                       encodeURIComponent(`TPBank\nSo TK: 20588668888\nTen TK: Sky Music Store\nNoi dung: Nap tien ${transactionId}`);
    
    img.src = fallbackUrl;
    img.onerror = function() {
        // If all QR services fail, show manual info only
        img.style.display = 'none';
        const container = img.closest('.qr-container');
        if (container) {
            container.innerHTML = `
                <div class="bg-red-50 p-4 rounded-lg border border-red-200">
                    <p class="text-red-700 text-sm font-medium mb-2">‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫°o m√£ QR</p>
                    <p class="text-red-600 text-xs">Vui l√≤ng chuy·ªÉn kho·∫£n th·ªß c√¥ng theo th√¥ng tin b√™n d∆∞·ªõi</p>
                </div>
            `;
        }
    };
}

function switchQR(newUrl) {
    const primaryQR = document.getElementById('primaryQR');
    if (primaryQR) {
        primaryQR.src = newUrl;
        primaryQR.onerror = function() {
            handleQRError(this, currentTransactionId);
        };
    }
}

// Update payment status UI in real-time
function updatePaymentStatusUI(status) {
    let statusHtml = '';
    let className = '';
    
    switch(status) {
        case 'completed':
            statusHtml = `
                <div class="flex items-center gap-2">
                    <span class="text-green-600 text-lg">‚úÖ</span>
                    <div>
                        <p class="font-semibold text-green-800">Thanh to√°n th√†nh c√¥ng!</p>
                        <p class="text-sm text-green-700">Coins ƒë√£ ƒë∆∞·ª£c c·ªông v√†o t√†i kho·∫£n</p>
                    </div>
                </div>
            `;
            className = 'bg-green-50 border-green-200';
            break;
        case 'processing':
            statusHtml = `
                <div class="flex items-center gap-2">
                    <span class="text-blue-600 text-lg animate-spin">‚ö°</span>
                    <div>
                        <p class="font-semibold text-blue-800">ƒêang x·ª≠ l√Ω thanh to√°n</p>
                        <p class="text-sm text-blue-700">Ng√¢n h√†ng ƒëang x√°c th·ª±c giao d·ªãch...</p>
                    </div>
                </div>
            `;
            className = 'bg-blue-50 border-blue-200';
            break;
        default:
            statusHtml = `
                <div class="flex items-center gap-2">
                    <span class="text-orange-600 text-lg">‚è≥</span>
                    <div>
                        <p class="font-semibold text-orange-800">ƒêang ch·ªù thanh to√°n</p>
                        <p class="text-sm text-orange-700">Vui l√≤ng chuy·ªÉn kho·∫£n ƒë·ªÉ ho√†n t·∫•t giao d·ªãch</p>
                    </div>
                </div>
            `;
            className = 'bg-orange-50 border-orange-200';
    }
    
    // Find and update status div
    const paymentInfo = document.getElementById('paymentInfo');
    if (paymentInfo) {
        let statusDiv = paymentInfo.querySelector('.payment-status');
        if (!statusDiv) {
            statusDiv = document.createElement('div');
            statusDiv.className = 'payment-status border p-3 rounded-lg mt-4';
            paymentInfo.appendChild(statusDiv);
        }
        statusDiv.className = `payment-status border p-3 rounded-lg mt-4 ${className}`;
        statusDiv.innerHTML = statusHtml;
    }
}

// Show success notification
function showSuccessNotification() {
    const notification = document.createElement('div');
    notification.className = 'fixed top-4 right-4 bg-green-500 text-white p-4 rounded-lg shadow-lg z-50 animate-bounce';
    notification.innerHTML = `
        <div class="flex items-center gap-2">
            <span class="text-2xl">üéâ</span>
            <div>
                <p class="font-bold">Thanh to√°n th√†nh c√¥ng!</p>
                <p class="text-sm">Coins ƒë√£ ƒë∆∞·ª£c c·ªông v√†o t√†i kho·∫£n</p>
            </div>
        </div>
    `;
    
    document.body.appendChild(notification);
    
    setTimeout(() => {
        notification.remove();
    }, 5000);
}
</script>
@endsection
